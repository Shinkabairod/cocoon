
import { Button } from "@/components/ui/button";
import { useOnboarding } from "@/contexts/OnboardingContext";
import { LearningStyle } from "@/types/onboarding";
import OnboardingLayout from "../OnboardingLayout";
import { Card } from "@/components/ui/card";
import { Check, BookOpen, Video, FileText, Zap, MessageCircle, Bot, PenTool, School, MessagesSquare } from "lucide-react";
import { useState } from "react";
import { AlertCircle } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";

const LearningStyleStep = () => {
  const { onboardingData, updateOnboardingData, nextStep } = useOnboarding();
  const [selectedLearningStyles, setSelectedLearningStyles] = useState<LearningStyle[]>(
    onboardingData.learningStyles || []
  );
  
  const learningStyles: { style: LearningStyle; icon: JSX.Element; description: string }[] = [
    { style: 'Step-by-step guides', icon: <BookOpen className="h-5 w-5" />, description: 'Detailed instructions to follow' },
    { style: 'Video tutorials', icon: <Video className="h-5 w-5" />, description: 'Visual guides and demonstrations' },
    { style: 'Articles', icon: <FileText className="h-5 w-5" />, description: 'In-depth written content' },
    { style: 'Interactive exercises', icon: <Zap className="h-5 w-5" />, description: 'Practice with immediate feedback' },
    { style: 'Coaching personnalis√©', icon: <MessageCircle className="h-5 w-5" />, description: 'Advice tailored to your needs' },
    { style: 'AI suggestions', icon: <Bot className="h-5 w-5" />, description: 'Ideas generated by our AI' },
    { style: 'Writing prompts', icon: <PenTool className="h-5 w-5" />, description: 'Guided writing exercises' },
    { style: 'Examples analysis', icon: <School className="h-5 w-5" />, description: 'Case studies of successful content' },
    { style: 'Community feedback', icon: <MessagesSquare className="h-5 w-5" />, description: 'Input from other creators' }
  ];
  
  const toggleLearningStyle = (style: LearningStyle) => {
    const updatedStyles = selectedLearningStyles.includes(style)
      ? selectedLearningStyles.filter(s => s !== style)
      : [...selectedLearningStyles, style];
    
    setSelectedLearningStyles(updatedStyles);
    updateOnboardingData({ learningStyles: updatedStyles });
  };
  
  const handleContinue = () => {
    nextStep();
  };
  
  return (
    <OnboardingLayout 
      title="Your Learning Style" 
      subtitle="How would you like me to interact with you to help you learn and grow?"
    >
      <div className="space-y-6">
        <Alert className="bg-muted border-primary/30">
          <AlertCircle className="h-4 w-4 text-primary" />
          <AlertDescription className="text-xs">
            Don't worry, you can always change these preferences later in your settings.
          </AlertDescription>
        </Alert>
        
        <div>
          <div className="grid grid-cols-1 gap-3">
            {learningStyles.map(({ style, icon, description }) => {
              const isSelected = selectedLearningStyles.includes(style);
              
              return (
                <Card 
                  key={style}
                  className={`p-3 cursor-pointer border-2 ${
                    isSelected 
                      ? 'border-primary' 
                      : 'border-border hover:border-muted-foreground'
                  }`}
                  onClick={() => toggleLearningStyle(style)}
                >
                  <div className="flex items-center space-x-3">
                    <div className="p-2 rounded-full bg-muted">{icon}</div>
                    <div className="flex-1">
                      <div className="font-medium">{style}</div>
                      <div className="text-xs text-muted-foreground">{description}</div>
                    </div>
                    {isSelected && <Check className="h-5 w-5 text-primary" />}
                  </div>
                </Card>
              );
            })}
          </div>
        </div>
        
        <div className="pt-4 flex justify-center">
          <Button 
            className="gradient-bg w-full"
            onClick={handleContinue}
            disabled={selectedLearningStyles.length === 0}
          >
            Continue
          </Button>
        </div>
      </div>
    </OnboardingLayout>
  );
};

export default LearningStyleStep;
