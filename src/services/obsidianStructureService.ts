import { OnboardingData } from '@/types/onboarding';
import { huggingfaceService } from './huggingfaceService';

interface ObsidianFile {
  path: string;
  content: string;
}

export const obsidianStructureService = {
  async createUserVault(userId: string, onboardingData: OnboardingData): Promise<void> {
    const files = this.generateObsidianFiles(onboardingData);
    
    console.log(`üóÇÔ∏è Cr√©ation de ${files.length} fichiers Obsidian pour user ${userId}`);
    
    // Cr√©er chaque fichier dans la structure vaults/user_{userId}/
    for (const file of files) {
      try {
        await huggingfaceService.saveObsidianFile(userId, file.path, file.content);
        console.log(`‚úÖ Fichier cr√©√©: ${file.path}`);
      } catch (error) {
        console.error(`‚ùå Erreur cr√©ation fichier ${file.path}:`, error);
        // Fallback vers la m√©thode note standard
        await huggingfaceService.saveNote(
          file.path.replace('.md', '').replace(/\//g, '_'),
          file.content,
          'obsidian_vault'
        );
      }
    }
    
    console.log(`üéØ Structure Obsidian compl√®te cr√©√©e pour user ${userId}`);
  },

  generateObsidianFiles(data: OnboardingData): ObsidianFile[] {
    const files: ObsidianFile[] = [];
    const date = new Date().toISOString().split('T')[0];

    // 1. Profile/user_profile.md
    files.push({
      path: 'Profile/user_profile.md',
      content: this.generateUserProfile(data, date)
    });

    // 2. Profile/business_profile.md
    files.push({
      path: 'Profile/business_profile.md',
      content: this.generateBusinessProfile(data)
    });

    // 3. Profile/creator_personality.md (si path d√©couverte)
    if (data.hasContentDirection === false && data.passions) {
      files.push({
        path: 'Profile/creator_personality.md',
        content: this.generateCreatorPersonality(data)
      });
    }

    // 4. Content_Strategy/content_goals.md
    files.push({
      path: 'Content_Strategy/content_goals.md',
      content: this.generateContentGoals(data)
    });

    // 5. Content_Strategy/platforms_and_audience.md
    files.push({
      path: 'Content_Strategy/platforms_and_audience.md',
      content: this.generatePlatformsAndAudience(data)
    });

    // 6. Content_Strategy/content_types_and_niche.md
    files.push({
      path: 'Content_Strategy/content_types_and_niche.md',
      content: this.generateContentTypesAndNiche(data)
    });

    // 7. Content_Strategy/social_accounts.md
    if (data.socialMediaAccounts && Object.keys(data.socialMediaAccounts).length > 0) {
      files.push({
        path: 'Content_Strategy/social_accounts.md',
        content: this.generateSocialAccounts(data)
      });
    }

    // 8. Resources_and_Skills/current_challenges.md
    files.push({
      path: 'Resources_and_Skills/current_challenges.md',
      content: this.generateCurrentChallenges(data)
    });

    // 9. Resources_and_Skills/available_resources.md
    files.push({
      path: 'Resources_and_Skills/available_resources.md',
      content: this.generateAvailableResources(data)
    });

    // 10. Resources_and_Skills/learning_preferences.md
    files.push({
      path: 'Resources_and_Skills/learning_preferences.md',
      content: this.generateLearningPreferences(data)
    });

    // 11. Resources_and_Skills/existing_skills.md
    if (data.selectedSkills && data.selectedSkills.length > 0) {
      files.push({
        path: 'Resources_and_Skills/existing_skills.md',
        content: this.generateExistingSkills(data)
      });
    }

    // 12. Goals_and_Metrics/impact_goals.md
    files.push({
      path: 'Goals_and_Metrics/impact_goals.md',
      content: this.generateImpactGoals(data)
    });

    // 13. Goals_and_Metrics/success_metrics.md
    if (data.successMetrics && data.successMetrics.length > 0) {
      files.push({
        path: 'Goals_and_Metrics/success_metrics.md',
        content: this.generateSuccessMetrics(data)
      });
    }

    // 14. Goals_and_Metrics/monetization_strategy.md
    files.push({
      path: 'Goals_and_Metrics/monetization_strategy.md',
      content: this.generateMonetizationStrategy(data)
    });

    // 15. AI_Context/onboarding_summary.md (fichier principal pour l'IA)
    files.push({
      path: 'AI_Context/onboarding_summary.md',
      content: this.generateAISummary(data)
    });

    return files;
  },

  generateUserProfile(data: OnboardingData, date: string): string {
    return `# Profil Utilisateur

## Informations de base
- **Niveau d'exp√©rience**: ${data.experienceLevel || 'Non sp√©cifi√©'}
- **Objectif principal**: ${data.contentGoal || 'Non sp√©cifi√©'}
- **Localisation**: ${data.city ? `${data.city}, ${data.country}` : data.country || 'Non sp√©cifi√©e'}
- **Date d'onboarding**: ${date}

## Vision cr√©ative
${data.businessDescription || 'Aucune description fournie'}

## Statut onboarding
- **√âtape**: ${data.step}/21
- **Direction claire**: ${data.hasContentDirection ? 'Oui' : 'Non'}
- **Path suivi**: ${data.onboardingStage || 'Standard'}

## Tags
#profil #utilisateur #onboarding
`;
  },

  generateBusinessProfile(data: OnboardingData): string {
    return `# Profil Business

## Type d'activit√©
${data.businessType || 'Non sp√©cifi√©'}

## Description d√©taill√©e
${data.businessDescription || 'Aucune description fournie'}

## Localisation business
- **Pays**: ${data.country || 'Non sp√©cifi√©'}
- **Ville**: ${data.city || 'Non sp√©cifi√©e'}

## Objectifs business
${data.contentGoal || 'Non sp√©cifi√©'}

## Tags
#business #professionnel #activit√©
`;
  },

  generateCreatorPersonality(data: OnboardingData): string {
    return `# Personnalit√© Cr√©atrice

## Passions identifi√©es
${data.passions?.join(', ') || 'Non sp√©cifi√©es'}

## Traits de personnalit√©
${data.personalityTraits?.join(', ') || 'Non sp√©cifi√©s'}

## Valeurs de vie
${data.lifeValues?.join(', ') || 'Non sp√©cifi√©es'}

## Path de d√©couverte
Cette section contient les informations collect√©es lors du parcours de d√©couverte cr√©atrice pour les utilisateurs sans direction claire.

## Tags
#personnalit√© #valeurs #d√©couverte #cr√©ateur
`;
  },

  generateContentGoals(data: OnboardingData): string {
    return `# Objectifs de Contenu

## Objectif principal
${data.contentGoal || 'Non sp√©cifi√©'}

## Objectifs d'impact
${data.impactGoals?.join(', ') || 'Non sp√©cifi√©s'}

## Vision √† long terme
${data.businessDescription || 'Aucune vision d√©finie'}

## Strat√©gie de croissance
Bas√© sur le niveau d'exp√©rience: ${data.experienceLevel || 'Non d√©fini'}

## Tags
#objectifs #strat√©gie #vision #croissance
`;
  },

  generatePlatformsAndAudience(data: OnboardingData): string {
    return `# Plateformes et Audience

## Plateformes cibles
${data.platforms?.join(', ') || 'Aucune plateforme s√©lectionn√©e'}

## Audience cible
- **G√©n√©ration**: ${data.targetGeneration || 'Non sp√©cifi√©e'}

## Objectifs d'impact sur l'audience
${data.impactGoals?.join(', ') || 'Non sp√©cifi√©s'}

## Strat√©gie multi-plateforme
${data.platforms?.length > 1 ? 'Strat√©gie multi-plateforme activ√©e' : 'Focus sur une plateforme principale'}

## Tags
#plateformes #audience #cible #engagement
`;
  },

  generateContentTypesAndNiche(data: OnboardingData): string {
    return `# Types de Contenu et Niche

## Types de contenu
${data.contentTypes?.join(', ') || 'Aucun type s√©lectionn√©'}

## Niche sp√©cialis√©e
${data.niche || 'Niche g√©n√©rale'}

## Cat√©gories de contenu
${data.contentCategories?.join(', ') || 'Aucune cat√©gorie sp√©cifique'}

## Lieux de tournage
- **Principal**: ${data.filmingLocationName || data.filmingLocation || 'Non sp√©cifi√©'}
- **Personnalis√©**: ${data.customFilmingLocation || 'Aucun'}

## Tags
#contenu #niche #cat√©gories #tournage
`;
  },

  generateSocialAccounts(data: OnboardingData): string {
    const accounts = data.socialMediaAccounts || {};
    const accountList = Object.entries(accounts)
      .filter(([_, account]) => account && account.trim() !== '')
      .map(([platform, account]) => `- **${platform}**: ${account}`)
      .join('\n');

    return `# Comptes Sociaux

## Comptes existants
${accountList || 'Aucun compte renseign√©'}

## Strat√©gie de liaison
Int√©gration des comptes existants dans la strat√©gie de contenu globale.

## Tags
#r√©seaux-sociaux #comptes #existants #int√©gration
`;
  },

  generateCurrentChallenges(data: OnboardingData): string {
    return `# D√©fis Actuels

## Principaux d√©fis identifi√©s
${data.contentChallenges?.join(', ') || 'Aucun d√©fi sp√©cifique identifi√©'}

## Priorisation des d√©fis
1. **D√©fi principal**: ${data.contentChallenges?.[0] || 'Non identifi√©'}
2. **D√©fi secondaire**: ${data.contentChallenges?.[1] || 'Non identifi√©'}

## Plan d'action recommand√©
Bas√© sur les d√©fis identifi√©s et le niveau d'exp√©rience (${data.experienceLevel}).

## Tags
#d√©fis #obstacles #priorit√©s #action
`;
  },

  generateAvailableResources(data: OnboardingData): string {
    return `# Ressources Disponibles

## Temps disponible
**${data.timeAvailable || 'Non sp√©cifi√©'}** par semaine

## √âquipement poss√©d√©
${data.equipmentOwned?.join(', ') || 'Aucun √©quipement sp√©cifique renseign√©'}

## Lieux de tournage
- **Type**: ${data.filmingLocationName || 'Non sp√©cifi√©'}
- **D√©tails**: ${data.customFilmingLocation || 'Standard'}

## Ressources √©ducatives s√©lectionn√©es
${data.selectedResources?.filter(r => r.selected).map(r => r.title).join(', ') || 'Aucune ressource s√©lectionn√©e'}

## Tags
#ressources #√©quipement #temps #formation
`;
  },

  generateLearningPreferences(data: OnboardingData): string {
    return `# Pr√©f√©rences d'Apprentissage

## Style d'apprentissage
${data.learningStyle || 'Non sp√©cifi√©'}

## Ressources pr√©f√©r√©es
${data.selectedResources?.filter(r => r.selected).map(r => `- ${r.title}: ${r.description}`).join('\n') || 'Aucune pr√©f√©rence sp√©cifique'}

## M√©thode recommand√©e
Bas√© sur le profil: adaptation du coaching selon le style d'apprentissage identifi√©.

## Tags
#apprentissage #formation #style #m√©thode
`;
  },

  generateExistingSkills(data: OnboardingData): string {
    return `# Comp√©tences Existantes

## Comp√©tences actuelles
${data.selectedSkills?.join(', ') || 'Aucune comp√©tence sp√©cifique identifi√©e'}

## Niveau d'exp√©rience global
${data.experienceLevel || 'Non √©valu√©'}

## Comp√©tences √† d√©velopper
Bas√© sur les d√©fis identifi√©s: ${data.contentChallenges?.join(', ') || '√Ä d√©finir'}

## Tags
#comp√©tences #skills #d√©veloppement #expertise
`;
  },

  generateImpactGoals(data: OnboardingData): string {
    return `# Objectifs d'Impact

## Types d'impact souhait√©s
${data.impactGoals?.join(', ') || 'Impact non d√©fini'}

## Audience cible
${data.targetGeneration || 'Toutes g√©n√©rations'}

## Strat√©gie d'impact
Alignement entre les objectifs d'impact et le type de contenu (${data.contentTypes?.join(', ') || 'non d√©fini'}).

## Tags
#impact #audience #influence #objectifs
`;
  },

  generateSuccessMetrics(data: OnboardingData): string {
    return `# M√©triques de Succ√®s

## Indicateurs de succ√®s
${data.successMetrics?.join(', ') || 'M√©triques non d√©finies'}

## Objectifs de croissance
Bas√© sur: ${data.contentGoal || 'objectif non d√©fini'}

## Suivi recommand√©
M√©triques adapt√©es au niveau d'exp√©rience (${data.experienceLevel}) et aux plateformes choisies.

## Tags
#m√©triques #succ√®s #mesure #croissance
`;
  },

  generateMonetizationStrategy(data: OnboardingData): string {
    return `# Strat√©gie de Mon√©tisation

## Intention de mon√©tisation
${data.monetization || 'Non d√©finie'}

## Plan s√©lectionn√©
${data.selectedPlan || 'Aucun plan choisi'}

## Objectifs business
${data.contentGoal || 'Non d√©fini'}

## Recommandations
Strat√©gie adapt√©e au niveau d'exp√©rience et aux objectifs d√©finis.

## Tags
#mon√©tisation #business #revenus #strat√©gie
`;
  },

  generateAISummary(data: OnboardingData): string {
    const challengesPriority = data.contentChallenges?.slice(0, 2) || [];
    const platforms = data.platforms?.slice(0, 3) || [];
    const skills = data.selectedSkills?.slice(0, 3) || [];

    return `# R√©sum√© Onboarding - Contexte IA

## Profil rapide
Cr√©ateur **${data.experienceLevel || 'd√©butant'}** en **${data.niche || 'contenu g√©n√©ral'}**, objectif: **${data.contentGoal || 'non d√©fini'}**

## Priorit√©s coaching
1. **D√©fi principal**: ${challengesPriority[0] || '√Ä identifier'}
2. **D√©fi secondaire**: ${challengesPriority[1] || '√Ä identifier'}
3. **Temps disponible**: ${data.timeAvailable || 'Non sp√©cifi√©'}
4. **Style d'apprentissage**: ${data.learningStyle || '√Ä d√©finir'}

## Contexte technique
- **Plateformes**: ${platforms.join(', ') || 'Non d√©finies'}
- **Types de contenu**: ${data.contentTypes?.join(', ') || 'Non d√©finis'}
- **√âquipement**: ${data.equipmentOwned?.length || 0} items disponibles
- **Comp√©tences**: ${skills.join(', ') || '√Ä √©valuer'}

## Audience et impact
- **Cible**: ${data.targetGeneration || 'Large audience'}
- **Impact souhait√©**: ${data.impactGoals?.join(', ') || '√Ä d√©finir'}

## Business et mon√©tisation
- **Intention mon√©tisation**: ${data.monetization || 'Non d√©finie'}
- **Type d'activit√©**: ${data.businessType || 'Personnel'}

## Recommandations automatiques
### Focus imm√©diat
${challengesPriority[0] ? `R√©soudre le d√©fi "${challengesPriority[0]}" en priorit√©` : 'D√©finir les priorit√©s de contenu'}

### Plan d'action sugg√©r√©
1. **Semaine 1-2**: Formation sur ${challengesPriority[0] || 'les bases'}
2. **Semaine 3-4**: Cr√©ation de contenu adapt√© aux ${platforms.join(' et ') || 'plateformes choisies'}
3. **Mois 2**: Optimisation bas√©e sur ${data.successMetrics?.[0] || 'les premiers r√©sultats'}

## Points d'attention pour l'IA
- **Niveau d'accompagnement**: ${data.experienceLevel === 'Beginner' ? 'Haute guidance' : data.experienceLevel === 'Experienced' ? 'Conseils experts' : 'Guidance mod√©r√©e'}
- **Personnalisation**: ${data.hasContentDirection === false ? 'Forte personnalisation requise' : 'Guidance cibl√©e'}
- **Urgence business**: ${data.monetization === 'Yes' ? 'Priorit√© business' : 'Focus cr√©atif'}

## Tags pour recherche IA
#${data.experienceLevel?.toLowerCase() || 'd√©butant'} #${data.contentGoal?.toLowerCase().replace(/\s+/g, '-') || 'g√©n√©ral'} #${data.niche?.toLowerCase().replace(/\s+/g, '-') || 'contenu'} #${challengesPriority[0]?.toLowerCase().replace(/\s+/g, '-') || 'formation'}

---
*G√©n√©r√© automatiquement le ${new Date().toLocaleDateString('fr-FR')} - Onboarding √©tape ${data.step}/21*
`;
  }
};
