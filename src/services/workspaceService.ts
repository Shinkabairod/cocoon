
import { supabase } from '@/integrations/supabase/client';

export interface WorkspaceFile {
  id: string;
  name: string;
  type: 'text' | 'pdf' | 'video' | 'image' | 'link' | 'onboarding';
  content?: string;
  url?: string;
  size?: string;
  lastModified: string;
  folderId: string;
  userId: string;
}

export interface WorkspaceFolder {
  id: string;
  name: string;
  emoji: string;
  type: 'personal' | 'resources';
  userId: string;
  createdAt: string;
}

class WorkspaceService {
  
  /**
   * Charge les donn√©es d'onboarding depuis Supabase et les convertit en fichiers
   */
  async loadOnboardingAsFiles(userId: string): Promise<WorkspaceFile[]> {
    try {
      console.log('üìÇ Loading onboarding data for user:', userId);
      
      const { data: profile, error } = await supabase
        .from('user_profiles')
        .select('profile_data')
        .eq('user_id', userId)
        .single();

      if (error) {
        console.error('‚ùå Error loading profile:', error);
        return [];
      }

      if (!profile?.profile_data) {
        console.log('‚ö†Ô∏è No profile data found');
        return [];
      }

      const onboardingData = profile.profile_data as any;
      const files: WorkspaceFile[] = [];

      // Cr√©er le fichier profil principal
      files.push({
        id: 'profile-main',
        name: 'Mon Profil Cr√©ateur.md',
        type: 'onboarding',
        content: this.formatProfileContent(onboardingData),
        lastModified: new Date().toISOString().split('T')[0],
        folderId: 'personal-profile',
        userId
      });

      // Cr√©er le fichier objectifs
      files.push({
        id: 'goals-2025',
        name: 'Mes Objectifs.md',
        type: 'onboarding',
        content: this.formatGoalsContent(onboardingData),
        lastModified: new Date().toISOString().split('T')[0],
        folderId: 'personal-goals',
        userId
      });

      // Cr√©er le fichier business
      files.push({
        id: 'business-model',
        name: 'Mon Business Model.md',
        type: 'onboarding',
        content: this.formatBusinessContent(onboardingData),
        lastModified: new Date().toISOString().split('T')[0],
        folderId: 'personal-business',
        userId
      });

      // Cr√©er le fichier plateformes
      files.push({
        id: 'platforms-strategy',
        name: 'Strat√©gie Plateformes.md',
        type: 'onboarding',
        content: this.formatPlatformsContent(onboardingData),
        lastModified: new Date().toISOString().split('T')[0],
        folderId: 'personal-platforms',
        userId
      });

      // Cr√©er le fichier d√©fis
      files.push({
        id: 'challenges-solutions',
        name: 'D√©fis & Solutions.md',
        type: 'onboarding',
        content: this.formatChallengesContent(onboardingData),
        lastModified: new Date().toISOString().split('T')[0],
        folderId: 'personal-challenges',
        userId
      });

      console.log('‚úÖ Generated files from onboarding:', files.length);
      return files;

    } catch (error) {
      console.error('‚ùå Error in loadOnboardingAsFiles:', error);
      return [];
    }
  }

  /**
   * Sauvegarde un fichier dans Supabase
   */
  async saveFile(file: WorkspaceFile): Promise<boolean> {
    try {
      const { error } = await supabase
        .from('vault_files')
        .upsert({
          user_id: file.userId,
          path: `${file.folderId}/${file.name}`,
          content: file.content,
          file_type: file.type,
          metadata: {
            folderId: file.folderId,
            lastModified: file.lastModified
          } as any
        });

      if (error) {
        console.error('‚ùå Error saving file:', error);
        return false;
      }

      console.log('‚úÖ File saved:', file.name);
      return true;
    } catch (error) {
      console.error('‚ùå Exception saving file:', error);
      return false;
    }
  }

  /**
   * Charge tous les fichiers d'un utilisateur
   */
  async loadUserFiles(userId: string): Promise<WorkspaceFile[]> {
    try {
      const { data: files, error } = await supabase
        .from('vault_files')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå Error loading files:', error);
        return [];
      }

      return (files || []).map(file => ({
        id: file.id.toString(),
        name: file.path.split('/').pop() || '',
        type: file.file_type as any || 'text',
        content: file.content || '',
        lastModified: file.updated_at?.split('T')[0] || '',
        folderId: (file.metadata as any)?.folderId || 'default',
        userId: file.user_id || ''
      }));

    } catch (error) {
      console.error('‚ùå Exception loading files:', error);
      return [];
    }
  }

  /**
   * Supprime un fichier
   */
  async deleteFile(fileId: string, userId: string): Promise<boolean> {
    try {
      const { error } = await supabase
        .from('vault_files')
        .delete()
        .eq('id', parseInt(fileId))
        .eq('user_id', userId);

      if (error) {
        console.error('‚ùå Error deleting file:', error);
        return false;
      }

      console.log('‚úÖ File deleted:', fileId);
      return true;
    } catch (error) {
      console.error('‚ùå Exception deleting file:', error);
      return false;
    }
  }

  // Formatters pour le contenu des fichiers
  private formatProfileContent(data: any): string {
    return `# üë§ Mon Profil Cr√©ateur

## üéØ Informations de base
- **Exp√©rience**: ${data.experienceLevel || 'Non d√©fini'}
- **Objectif**: ${data.contentGoal || 'Non d√©fini'}
- **Niche**: ${data.niche || 'Non d√©fini'}
- **Localisation**: ${data.city || ''}, ${data.country || ''}

## üè¢ Business
- **Type**: ${data.businessType || 'Non d√©fini'}
- **Description**: ${data.businessDescription || 'Non d√©fini'}

## üéØ Strat√©gie
- **Plateformes**: ${Array.isArray(data.platforms) ? data.platforms.join(', ') : 'Non d√©fini'}
- **Types de contenu**: ${Array.isArray(data.contentTypes) ? data.contentTypes.join(', ') : 'Non d√©fini'}
- **Audience**: ${data.targetGeneration || 'Non d√©fini'}

## ‚è∞ Ressources
- **Temps disponible**: ${data.timeAvailable || 'Non d√©fini'}
- **√âquipement**: ${Array.isArray(data.equipmentOwned) ? data.equipmentOwned.join(', ') : 'Non d√©fini'}
- **D√©fis**: ${data.contentChallenge || data.mainChallenges || 'Non d√©fini'}

## üí∞ Mon√©tisation
- **Intention**: ${data.monetizationIntent || 'Non d√©fini'}

---
**Mis √† jour le**: ${new Date().toLocaleDateString('fr-FR')}`;
  }

  private formatGoalsContent(data: any): string {
    return `# üéØ Mes Objectifs

## üìä Objectif principal
${data.contentGoal || 'D√©finir mes objectifs de cr√©ation de contenu'}

## üé¨ Types de contenu vis√©s
${Array.isArray(data.contentTypes) ? 
  data.contentTypes.map((type: string) => `- ${type}`).join('\n') : 
  '- √Ä d√©finir'}

## üì± Plateformes prioritaires
${Array.isArray(data.platforms) ? 
  data.platforms.map((platform: string) => `- ${platform}`).join('\n') : 
  '- √Ä d√©finir'}

## üéØ Audience cible
- **G√©n√©ration**: ${data.targetGeneration || '√Ä d√©finir'}
- **Niche**: ${data.niche || '√Ä d√©finir'}

## ‚è∞ Planning
- **Temps disponible**: ${data.timeAvailable || '√Ä d√©finir'}

---
**Cr√©√© le**: ${new Date().toLocaleDateString('fr-FR')}`;
  }

  private formatBusinessContent(data: any): string {
    return `# üè¢ Mon Business Model

## üíº Type de business
${data.businessType || '√Ä d√©finir'}

## üìù Description
${data.businessDescription || 'D√©crire mon activit√©'}

## üí∞ Strat√©gie de mon√©tisation
${data.monetizationIntent || '√Ä d√©finir'}

## üéØ Positionnement
- **Niche**: ${data.niche || '√Ä d√©finir'}
- **Exp√©rience**: ${data.experienceLevel || '√Ä d√©finir'}

## üìä M√©triques importantes
- Abonn√©s
- Engagement
- Revenus
- Croissance

---
**Cr√©√© le**: ${new Date().toLocaleDateString('fr-FR')}`;
  }

  private formatPlatformsContent(data: any): string {
    const platforms = Array.isArray(data.platforms) ? data.platforms : [];
    
    return `# üì± Ma Strat√©gie Multi-Plateformes

## Plateformes s√©lectionn√©es
${platforms.length > 0 ? 
  platforms.map((platform: string) => `### ${platform}\n- Strat√©gie: √Ä d√©finir\n- Fr√©quence: √Ä planifier\n- Objectifs: √Ä fixer\n`).join('\n') :
  'Aucune plateforme s√©lectionn√©e'}

## Types de contenu par plateforme
${Array.isArray(data.contentTypes) ? 
  data.contentTypes.map((type: string) => `- ${type}`).join('\n') : 
  '- √Ä d√©finir'}

## Planning de publication
- **Fr√©quence globale**: √Ä d√©finir selon le temps disponible (${data.timeAvailable || 'non sp√©cifi√©'})

---
**Cr√©√© le**: ${new Date().toLocaleDateString('fr-FR')}`;
  }

  private formatChallengesContent(data: any): string {
    return `# ‚ö° Mes D√©fis & Solutions

## üî• D√©fis identifi√©s
${data.contentChallenge || data.mainChallenges || '√Ä identifier'}

## üõ†Ô∏è √âquipement disponible
${Array.isArray(data.equipmentOwned) ? 
  data.equipmentOwned.map((equipment: string) => `- ${equipment}`).join('\n') : 
  '- √Ä inventorier'}

## ‚è∞ Contraintes de temps
- **Temps disponible**: ${data.timeAvailable || '√Ä √©valuer'}

## üí° Plan d'action
1. Identifier les priorit√©s
2. D√©velopper un workflow efficace
3. Optimiser les ressources disponibles
4. Mesurer et ajuster

## üéØ Solutions √† explorer
- Automatisation des t√¢ches r√©p√©titives
- Planification et batch content
- Formation continue
- Networking avec d'autres cr√©ateurs

---
**Cr√©√© le**: ${new Date().toLocaleDateString('fr-FR')}`;
  }
}

export const workspaceService = new WorkspaceService();
